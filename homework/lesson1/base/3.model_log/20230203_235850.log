2023-02-03 23:58:51,606 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: win32
Python: 3.8.13 (default, Mar 28 2022, 06:59:08) [MSC v.1916 64 bit (AMD64)]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 3050
CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.8
NVCC: Cuda compilation tools, release 11.8, V11.8.89
MSVC: 用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.34.31933 版
GCC: n/a
PyTorch: 1.13.0
PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192829337
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=C:/cb/pytorch_1000000000000/work/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj -DUSE_PTHREADPOOL -openmp:experimental -IC:/cb/pytorch_1000000000000/work/mkl/include -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.14.0
OpenCV: 4.6.0
MMCV: 1.7.0
MMCV Compiler: MSVC 192829924
MMCV CUDA Compiler: 11.7
MMClassification: 0.25.0+3d4f80d
------------------------------------------------------------

2023-02-03 23:58:51,610 - mmcls - INFO - Distributed training: False
2023-02-03 23:58:51,742 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='ResNet',
        depth=18,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=5,
        in_channels=512,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=(1, )))
dataset_type = 'ImageNet'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', size=224),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', size=(256, -1)),
    dict(type='CenterCrop', crop_size=224),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=32,
    workers_per_gpu=2,
    train=dict(
        type='ImageNet',
        data_prefix='',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ],
        ann_file='E:/0.Dataset/flower_dataset/tar_dts/train.txt',
        classes='E:/0.Dataset/flower_dataset/tar_dts/classes.txt'),
    val=dict(
        type='ImageNet',
        data_prefix='',
        ann_file='E:/0.Dataset/flower_dataset/tar_dts/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ],
        classes='E:/0.Dataset/flower_dataset/tar_dts/classes.txt'),
    test=dict(
        type='ImageNet',
        data_prefix='data/imagenet/val',
        ann_file='data/imagenet/meta/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1)),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(interval=1, metric='accuracy')
checkpoint_config = dict(interval=1)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = 'C:/Users/BING/Desktop/MMLab_code/mmclassification/checkpoints/resnet18_batch256_imagenet_20200708-34ab8f90.pth'
resume_from = None
workflow = [('train', 1)]
optimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[1])
runner = dict(type='EpochBasedRunner', max_epochs=100)
work_dir = 'work/resnet18_b16_flower'
gpu_ids = [0]

2023-02-03 23:58:51,750 - mmcls - INFO - Set random seed to 399048703, deterministic: False
2023-02-03 23:58:51,815 - mmcls - INFO - initialize ResNet with init_cfg [{'type': 'Kaiming', 'layer': ['Conv2d']}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2023-02-03 23:58:51,908 - mmcls - INFO - initialize LinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv1.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv1.weight - torch.Size([128, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.0.weight - torch.Size([128, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.downsample.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.downsample.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv1.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv1.weight - torch.Size([256, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.0.weight - torch.Size([256, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv1.weight - torch.Size([512, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv1.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([5, 512]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 
2023-02-03 23:58:52,168 - mmcls - INFO - load checkpoint from local path: C:/Users/BING/Desktop/MMLab_code/mmclassification/checkpoints/resnet18_batch256_imagenet_20200708-34ab8f90.pth
2023-02-03 23:58:52,211 - mmcls - WARNING - The model and loaded state dict do not match exactly

size mismatch for head.fc.weight: copying a param with shape torch.Size([1000, 512]) from checkpoint, the shape in current model is torch.Size([5, 512]).
size mismatch for head.fc.bias: copying a param with shape torch.Size([1000]) from checkpoint, the shape in current model is torch.Size([5]).
2023-02-03 23:58:52,213 - mmcls - INFO - Start running, host: BING@BING-PC, work_dir: C:\Users\BING\Desktop\MMLab_code\mmclassification\work\resnet18_b16_flower
2023-02-03 23:58:52,213 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-03 23:58:52,217 - mmcls - INFO - workflow: [('train', 1)], max: 100 epochs
2023-02-03 23:58:52,217 - mmcls - INFO - Checkpoints will be saved to C:\Users\BING\Desktop\MMLab_code\mmclassification\work\resnet18_b16_flower by HardDiskBackend.
2023-02-03 23:59:15,847 - mmcls - INFO - Saving checkpoint at 1 epochs
2023-02-03 23:59:23,816 - mmcls - INFO - Epoch(val) [1][18]	accuracy_top-1: 91.4336, accuracy_top-5: 100.0000
2023-02-03 23:59:33,404 - mmcls - INFO - Saving checkpoint at 2 epochs
2023-02-03 23:59:34,576 - mmcls - INFO - Epoch(val) [2][18]	accuracy_top-1: 92.6573, accuracy_top-5: 100.0000
2023-02-03 23:59:44,086 - mmcls - INFO - Saving checkpoint at 3 epochs
2023-02-03 23:59:45,276 - mmcls - INFO - Epoch(val) [3][18]	accuracy_top-1: 92.4825, accuracy_top-5: 100.0000
2023-02-03 23:59:54,850 - mmcls - INFO - Saving checkpoint at 4 epochs
2023-02-03 23:59:56,105 - mmcls - INFO - Epoch(val) [4][18]	accuracy_top-1: 93.1818, accuracy_top-5: 100.0000
2023-02-04 00:00:05,713 - mmcls - INFO - Saving checkpoint at 5 epochs
2023-02-04 00:00:06,886 - mmcls - INFO - Epoch(val) [5][18]	accuracy_top-1: 93.3566, accuracy_top-5: 100.0000
2023-02-04 00:00:16,703 - mmcls - INFO - Saving checkpoint at 6 epochs
2023-02-04 00:00:17,878 - mmcls - INFO - Epoch(val) [6][18]	accuracy_top-1: 93.3566, accuracy_top-5: 100.0000
2023-02-04 00:00:27,500 - mmcls - INFO - Saving checkpoint at 7 epochs
2023-02-04 00:00:28,654 - mmcls - INFO - Epoch(val) [7][18]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-04 00:00:38,265 - mmcls - INFO - Saving checkpoint at 8 epochs
2023-02-04 00:00:39,433 - mmcls - INFO - Epoch(val) [8][18]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-04 00:00:49,036 - mmcls - INFO - Saving checkpoint at 9 epochs
2023-02-04 00:00:50,257 - mmcls - INFO - Epoch(val) [9][18]	accuracy_top-1: 93.3566, accuracy_top-5: 100.0000
2023-02-04 00:00:59,817 - mmcls - INFO - Saving checkpoint at 10 epochs
2023-02-04 00:01:00,992 - mmcls - INFO - Epoch(val) [10][18]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-04 00:01:10,536 - mmcls - INFO - Saving checkpoint at 11 epochs
2023-02-04 00:01:11,714 - mmcls - INFO - Epoch(val) [11][18]	accuracy_top-1: 93.0070, accuracy_top-5: 100.0000
2023-02-04 00:01:21,319 - mmcls - INFO - Saving checkpoint at 12 epochs
2023-02-04 00:01:22,508 - mmcls - INFO - Epoch(val) [12][18]	accuracy_top-1: 93.3566, accuracy_top-5: 100.0000
2023-02-04 00:01:32,194 - mmcls - INFO - Saving checkpoint at 13 epochs
2023-02-04 00:01:33,422 - mmcls - INFO - Epoch(val) [13][18]	accuracy_top-1: 93.8811, accuracy_top-5: 100.0000
2023-02-04 00:01:43,018 - mmcls - INFO - Saving checkpoint at 14 epochs
2023-02-04 00:01:44,178 - mmcls - INFO - Epoch(val) [14][18]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-04 00:01:53,771 - mmcls - INFO - Saving checkpoint at 15 epochs
2023-02-04 00:01:54,924 - mmcls - INFO - Epoch(val) [15][18]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-04 00:02:04,569 - mmcls - INFO - Saving checkpoint at 16 epochs
2023-02-04 00:02:05,762 - mmcls - INFO - Epoch(val) [16][18]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-04 00:02:15,329 - mmcls - INFO - Saving checkpoint at 17 epochs
2023-02-04 00:02:16,542 - mmcls - INFO - Epoch(val) [17][18]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-04 00:02:26,114 - mmcls - INFO - Saving checkpoint at 18 epochs
2023-02-04 00:02:27,262 - mmcls - INFO - Epoch(val) [18][18]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-04 00:02:36,847 - mmcls - INFO - Saving checkpoint at 19 epochs
2023-02-04 00:02:38,009 - mmcls - INFO - Epoch(val) [19][18]	accuracy_top-1: 93.8811, accuracy_top-5: 100.0000
2023-02-04 00:02:47,671 - mmcls - INFO - Saving checkpoint at 20 epochs
2023-02-04 00:02:48,846 - mmcls - INFO - Epoch(val) [20][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-04 00:02:58,618 - mmcls - INFO - Saving checkpoint at 21 epochs
2023-02-04 00:02:59,889 - mmcls - INFO - Epoch(val) [21][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-04 00:03:09,500 - mmcls - INFO - Saving checkpoint at 22 epochs
2023-02-04 00:03:10,692 - mmcls - INFO - Epoch(val) [22][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-04 00:03:20,359 - mmcls - INFO - Saving checkpoint at 23 epochs
2023-02-04 00:03:21,515 - mmcls - INFO - Epoch(val) [23][18]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-04 00:03:31,229 - mmcls - INFO - Saving checkpoint at 24 epochs
2023-02-04 00:03:32,405 - mmcls - INFO - Epoch(val) [24][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-04 00:03:42,148 - mmcls - INFO - Saving checkpoint at 25 epochs
2023-02-04 00:03:43,326 - mmcls - INFO - Epoch(val) [25][18]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-04 00:03:52,920 - mmcls - INFO - Saving checkpoint at 26 epochs
2023-02-04 00:03:54,086 - mmcls - INFO - Epoch(val) [26][18]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-04 00:04:03,643 - mmcls - INFO - Saving checkpoint at 27 epochs
2023-02-04 00:04:04,811 - mmcls - INFO - Epoch(val) [27][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-04 00:04:14,396 - mmcls - INFO - Saving checkpoint at 28 epochs
2023-02-04 00:04:15,564 - mmcls - INFO - Epoch(val) [28][18]	accuracy_top-1: 93.7063, accuracy_top-5: 100.0000
2023-02-04 00:04:25,333 - mmcls - INFO - Saving checkpoint at 29 epochs
2023-02-04 00:04:26,521 - mmcls - INFO - Epoch(val) [29][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-04 00:04:36,051 - mmcls - INFO - Saving checkpoint at 30 epochs
2023-02-04 00:04:37,258 - mmcls - INFO - Epoch(val) [30][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-04 00:04:46,921 - mmcls - INFO - Saving checkpoint at 31 epochs
2023-02-04 00:04:48,119 - mmcls - INFO - Epoch(val) [31][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-04 00:04:57,695 - mmcls - INFO - Saving checkpoint at 32 epochs
2023-02-04 00:04:58,836 - mmcls - INFO - Epoch(val) [32][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-04 00:05:08,359 - mmcls - INFO - Saving checkpoint at 33 epochs
2023-02-04 00:05:09,509 - mmcls - INFO - Epoch(val) [33][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-04 00:05:18,995 - mmcls - INFO - Saving checkpoint at 34 epochs
2023-02-04 00:05:20,163 - mmcls - INFO - Epoch(val) [34][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-04 00:05:29,929 - mmcls - INFO - Saving checkpoint at 35 epochs
2023-02-04 00:05:31,119 - mmcls - INFO - Epoch(val) [35][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-04 00:05:40,684 - mmcls - INFO - Saving checkpoint at 36 epochs
2023-02-04 00:05:41,880 - mmcls - INFO - Epoch(val) [36][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-04 00:05:51,356 - mmcls - INFO - Saving checkpoint at 37 epochs
2023-02-04 00:05:52,535 - mmcls - INFO - Epoch(val) [37][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-04 00:06:02,337 - mmcls - INFO - Saving checkpoint at 38 epochs
2023-02-04 00:06:03,477 - mmcls - INFO - Epoch(val) [38][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-04 00:06:13,241 - mmcls - INFO - Saving checkpoint at 39 epochs
2023-02-04 00:06:14,412 - mmcls - INFO - Epoch(val) [39][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-04 00:06:24,109 - mmcls - INFO - Saving checkpoint at 40 epochs
2023-02-04 00:06:25,285 - mmcls - INFO - Epoch(val) [40][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-04 00:06:34,913 - mmcls - INFO - Saving checkpoint at 41 epochs
2023-02-04 00:06:36,100 - mmcls - INFO - Epoch(val) [41][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-04 00:06:45,644 - mmcls - INFO - Saving checkpoint at 42 epochs
2023-02-04 00:06:46,796 - mmcls - INFO - Epoch(val) [42][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-04 00:06:56,514 - mmcls - INFO - Saving checkpoint at 43 epochs
2023-02-04 00:06:57,683 - mmcls - INFO - Epoch(val) [43][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-04 00:07:07,244 - mmcls - INFO - Saving checkpoint at 44 epochs
2023-02-04 00:07:08,395 - mmcls - INFO - Epoch(val) [44][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-04 00:07:18,032 - mmcls - INFO - Saving checkpoint at 45 epochs
2023-02-04 00:07:19,191 - mmcls - INFO - Epoch(val) [45][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-04 00:07:28,956 - mmcls - INFO - Saving checkpoint at 46 epochs
2023-02-04 00:07:30,111 - mmcls - INFO - Epoch(val) [46][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-04 00:07:39,870 - mmcls - INFO - Saving checkpoint at 47 epochs
2023-02-04 00:07:41,036 - mmcls - INFO - Epoch(val) [47][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-04 00:07:50,619 - mmcls - INFO - Saving checkpoint at 48 epochs
2023-02-04 00:07:51,768 - mmcls - INFO - Epoch(val) [48][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-04 00:08:01,516 - mmcls - INFO - Saving checkpoint at 49 epochs
2023-02-04 00:08:02,645 - mmcls - INFO - Epoch(val) [49][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-04 00:08:12,171 - mmcls - INFO - Saving checkpoint at 50 epochs
2023-02-04 00:08:13,375 - mmcls - INFO - Epoch(val) [50][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-04 00:08:22,915 - mmcls - INFO - Saving checkpoint at 51 epochs
2023-02-04 00:08:24,078 - mmcls - INFO - Epoch(val) [51][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-04 00:08:33,633 - mmcls - INFO - Saving checkpoint at 52 epochs
2023-02-04 00:08:34,808 - mmcls - INFO - Epoch(val) [52][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-04 00:08:44,290 - mmcls - INFO - Saving checkpoint at 53 epochs
2023-02-04 00:08:45,415 - mmcls - INFO - Epoch(val) [53][18]	accuracy_top-1: 95.4545, accuracy_top-5: 100.0000
2023-02-04 00:08:54,906 - mmcls - INFO - Saving checkpoint at 54 epochs
2023-02-04 00:08:56,065 - mmcls - INFO - Epoch(val) [54][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-04 00:09:05,621 - mmcls - INFO - Saving checkpoint at 55 epochs
2023-02-04 00:09:06,744 - mmcls - INFO - Epoch(val) [55][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-04 00:09:16,263 - mmcls - INFO - Saving checkpoint at 56 epochs
2023-02-04 00:09:17,416 - mmcls - INFO - Epoch(val) [56][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-04 00:09:26,891 - mmcls - INFO - Saving checkpoint at 57 epochs
2023-02-04 00:09:28,043 - mmcls - INFO - Epoch(val) [57][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-04 00:09:37,493 - mmcls - INFO - Saving checkpoint at 58 epochs
2023-02-04 00:09:38,645 - mmcls - INFO - Epoch(val) [58][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-04 00:09:48,089 - mmcls - INFO - Saving checkpoint at 59 epochs
2023-02-04 00:09:49,232 - mmcls - INFO - Epoch(val) [59][18]	accuracy_top-1: 95.4545, accuracy_top-5: 100.0000
2023-02-04 00:09:58,685 - mmcls - INFO - Saving checkpoint at 60 epochs
2023-02-04 00:09:59,839 - mmcls - INFO - Epoch(val) [60][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-04 00:10:09,403 - mmcls - INFO - Saving checkpoint at 61 epochs
2023-02-04 00:10:10,574 - mmcls - INFO - Epoch(val) [61][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-04 00:10:20,131 - mmcls - INFO - Saving checkpoint at 62 epochs
2023-02-04 00:10:21,294 - mmcls - INFO - Epoch(val) [62][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-04 00:10:30,904 - mmcls - INFO - Saving checkpoint at 63 epochs
2023-02-04 00:10:32,051 - mmcls - INFO - Epoch(val) [63][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-04 00:10:41,730 - mmcls - INFO - Saving checkpoint at 64 epochs
2023-02-04 00:10:42,876 - mmcls - INFO - Epoch(val) [64][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-04 00:10:52,470 - mmcls - INFO - Saving checkpoint at 65 epochs
2023-02-04 00:10:53,623 - mmcls - INFO - Epoch(val) [65][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-04 00:11:03,233 - mmcls - INFO - Saving checkpoint at 66 epochs
2023-02-04 00:11:04,373 - mmcls - INFO - Epoch(val) [66][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-04 00:11:14,059 - mmcls - INFO - Saving checkpoint at 67 epochs
2023-02-04 00:11:15,203 - mmcls - INFO - Epoch(val) [67][18]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-04 00:11:24,669 - mmcls - INFO - Saving checkpoint at 68 epochs
2023-02-04 00:11:25,809 - mmcls - INFO - Epoch(val) [68][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-04 00:11:35,507 - mmcls - INFO - Saving checkpoint at 69 epochs
2023-02-04 00:11:36,658 - mmcls - INFO - Epoch(val) [69][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-04 00:11:46,258 - mmcls - INFO - Saving checkpoint at 70 epochs
2023-02-04 00:11:47,435 - mmcls - INFO - Epoch(val) [70][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-04 00:11:57,041 - mmcls - INFO - Saving checkpoint at 71 epochs
2023-02-04 00:11:58,184 - mmcls - INFO - Epoch(val) [71][18]	accuracy_top-1: 94.4056, accuracy_top-5: 100.0000
2023-02-04 00:12:07,690 - mmcls - INFO - Saving checkpoint at 72 epochs
2023-02-04 00:12:08,856 - mmcls - INFO - Epoch(val) [72][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-04 00:12:18,441 - mmcls - INFO - Saving checkpoint at 73 epochs
2023-02-04 00:12:19,587 - mmcls - INFO - Epoch(val) [73][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-04 00:12:29,184 - mmcls - INFO - Saving checkpoint at 74 epochs
2023-02-04 00:12:30,334 - mmcls - INFO - Epoch(val) [74][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-04 00:12:39,845 - mmcls - INFO - Saving checkpoint at 75 epochs
2023-02-04 00:12:40,987 - mmcls - INFO - Epoch(val) [75][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-04 00:12:50,592 - mmcls - INFO - Saving checkpoint at 76 epochs
2023-02-04 00:12:51,734 - mmcls - INFO - Epoch(val) [76][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-04 00:13:01,278 - mmcls - INFO - Saving checkpoint at 77 epochs
2023-02-04 00:13:02,450 - mmcls - INFO - Epoch(val) [77][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-04 00:13:12,113 - mmcls - INFO - Saving checkpoint at 78 epochs
2023-02-04 00:13:13,292 - mmcls - INFO - Epoch(val) [78][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-04 00:13:22,966 - mmcls - INFO - Saving checkpoint at 79 epochs
2023-02-04 00:13:24,114 - mmcls - INFO - Epoch(val) [79][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-04 00:13:33,640 - mmcls - INFO - Saving checkpoint at 80 epochs
2023-02-04 00:13:34,799 - mmcls - INFO - Epoch(val) [80][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-04 00:13:44,407 - mmcls - INFO - Saving checkpoint at 81 epochs
2023-02-04 00:13:45,578 - mmcls - INFO - Epoch(val) [81][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-04 00:13:55,162 - mmcls - INFO - Saving checkpoint at 82 epochs
2023-02-04 00:13:56,315 - mmcls - INFO - Epoch(val) [82][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-04 00:14:05,909 - mmcls - INFO - Saving checkpoint at 83 epochs
2023-02-04 00:14:07,072 - mmcls - INFO - Epoch(val) [83][18]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-04 00:14:16,642 - mmcls - INFO - Saving checkpoint at 84 epochs
2023-02-04 00:14:17,776 - mmcls - INFO - Epoch(val) [84][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-04 00:14:27,383 - mmcls - INFO - Saving checkpoint at 85 epochs
2023-02-04 00:14:28,530 - mmcls - INFO - Epoch(val) [85][18]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-04 00:14:38,041 - mmcls - INFO - Saving checkpoint at 86 epochs
2023-02-04 00:14:39,194 - mmcls - INFO - Epoch(val) [86][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-04 00:14:48,806 - mmcls - INFO - Saving checkpoint at 87 epochs
2023-02-04 00:14:49,984 - mmcls - INFO - Epoch(val) [87][18]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-04 00:14:59,714 - mmcls - INFO - Saving checkpoint at 88 epochs
2023-02-04 00:15:00,884 - mmcls - INFO - Epoch(val) [88][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-04 00:15:10,471 - mmcls - INFO - Saving checkpoint at 89 epochs
2023-02-04 00:15:11,607 - mmcls - INFO - Epoch(val) [89][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-04 00:15:21,131 - mmcls - INFO - Saving checkpoint at 90 epochs
2023-02-04 00:15:22,286 - mmcls - INFO - Epoch(val) [90][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-04 00:15:31,854 - mmcls - INFO - Saving checkpoint at 91 epochs
2023-02-04 00:15:33,020 - mmcls - INFO - Epoch(val) [91][18]	accuracy_top-1: 95.6294, accuracy_top-5: 100.0000
2023-02-04 00:15:42,552 - mmcls - INFO - Saving checkpoint at 92 epochs
2023-02-04 00:15:43,709 - mmcls - INFO - Epoch(val) [92][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-04 00:15:53,156 - mmcls - INFO - Saving checkpoint at 93 epochs
2023-02-04 00:15:54,309 - mmcls - INFO - Epoch(val) [93][18]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-04 00:16:03,984 - mmcls - INFO - Saving checkpoint at 94 epochs
2023-02-04 00:16:05,120 - mmcls - INFO - Epoch(val) [94][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-04 00:16:14,856 - mmcls - INFO - Saving checkpoint at 95 epochs
2023-02-04 00:16:16,008 - mmcls - INFO - Epoch(val) [95][18]	accuracy_top-1: 94.5804, accuracy_top-5: 100.0000
2023-02-04 00:16:25,531 - mmcls - INFO - Saving checkpoint at 96 epochs
2023-02-04 00:16:26,689 - mmcls - INFO - Epoch(val) [96][18]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-04 00:16:36,229 - mmcls - INFO - Saving checkpoint at 97 epochs
2023-02-04 00:16:37,390 - mmcls - INFO - Epoch(val) [97][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-04 00:16:46,995 - mmcls - INFO - Saving checkpoint at 98 epochs
2023-02-04 00:16:48,140 - mmcls - INFO - Epoch(val) [98][18]	accuracy_top-1: 95.2797, accuracy_top-5: 100.0000
2023-02-04 00:16:57,682 - mmcls - INFO - Saving checkpoint at 99 epochs
2023-02-04 00:16:58,819 - mmcls - INFO - Epoch(val) [99][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-04 00:17:08,313 - mmcls - INFO - Saving checkpoint at 100 epochs
2023-02-04 00:17:09,474 - mmcls - INFO - Epoch(val) [100][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
